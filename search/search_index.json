{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DemaTrading.ai backtesting engine # Star Fork Download Follow @dema-trading-ai Please join our Discord for updates, support, our community & more: https://discord.gg/WXxjtNzjEx Introduction # The DemaTrading.ai Engine is an open source backtesting Engine for trading as a part of DemaTrading . The Engine is completely made in the programming language Python ( click here to download Python ). Some Python experience makes this process easier, however with some extra effort this project should be runnable for anyone without any coding experience.","title":"Home"},{"location":"#dematradingai-backtesting-engine","text":"Star Fork Download Follow @dema-trading-ai Please join our Discord for updates, support, our community & more: https://discord.gg/WXxjtNzjEx","title":"DemaTrading.ai backtesting engine"},{"location":"#introduction","text":"The DemaTrading.ai Engine is an open source backtesting Engine for trading as a part of DemaTrading . The Engine is completely made in the programming language Python ( click here to download Python ). Some Python experience makes this process easier, however with some extra effort this project should be runnable for anyone without any coding experience.","title":"Introduction"},{"location":"changelog/","text":"Changelog # Version 0.x # TBA Version 0.1 # First release including features: -Easy strategy customization -OHLCV data in dataframe -Release / test pipelines -Progress bar for time indication -Enhanced backtest results -Automatically downloading data -Configurable base currency -Documentation setup -Dockerized the whole engine","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-0x","text":"TBA","title":"Version 0.x"},{"location":"changelog/#version-01","text":"First release including features: -Easy strategy customization -OHLCV data in dataframe -Release / test pipelines -Progress bar for time indication -Enhanced backtest results -Automatically downloading data -Configurable base currency -Documentation setup -Dockerized the whole engine","title":"Version 0.1"},{"location":"definitionsfaq/","text":"Coming Soon #","title":"Definitions/FAQ"},{"location":"definitionsfaq/#coming-soon","text":"","title":"Coming Soon"},{"location":"hitw/","text":"What we can do for you - as an algorithm creator! # DemaTrading is able to facilitate you with a platform for your algorithms, strategies, and bots to flourish! For you - as an algorithm creator - this means that our platform is able to host your strategies to investors and to assist you in getting more out of your algorithms! How does it work? # Well, very simple! Let's show you via the hands of a simple calculation example! An investor has noticed your bot and is very interested in using it and they're using their own funds along with your bots: Investor X is willing to invest 1.000.000 in total funds (can be multiple bots) with a fee of 0,01% per trade You - as the algorithm supplier will receive 60% of that 0,01% fee! Now you might think that that's not much due to it being 0,01%. However, this amount will be multiplied the second a buy and a sell happens as both the buy and the sell will have this 0,01% fee. Now, you might think it's just one trade and that it's not a significant amount, but don't fret, this amount can be multiplied up to 30 times with every single day having a buy and a sell. This would equal the following: 1000000 x 0,0001 x 0,6 x 2 x 30 = 3600 per month (this is the full amount the algorithm supplier makes per month) That's 3600 that you can earn with your algorithm! If your bot trades twice a day, it can go up to 7200 a month that you can earn with your algorithm by using our platform!","title":"What we can do for you - as an algorithm creator!"},{"location":"hitw/#what-we-can-do-for-you-as-an-algorithm-creator","text":"DemaTrading is able to facilitate you with a platform for your algorithms, strategies, and bots to flourish! For you - as an algorithm creator - this means that our platform is able to host your strategies to investors and to assist you in getting more out of your algorithms!","title":"What we can do for you - as an algorithm creator!"},{"location":"hitw/#how-does-it-work","text":"Well, very simple! Let's show you via the hands of a simple calculation example! An investor has noticed your bot and is very interested in using it and they're using their own funds along with your bots: Investor X is willing to invest 1.000.000 in total funds (can be multiple bots) with a fee of 0,01% per trade You - as the algorithm supplier will receive 60% of that 0,01% fee! Now you might think that that's not much due to it being 0,01%. However, this amount will be multiplied the second a buy and a sell happens as both the buy and the sell will have this 0,01% fee. Now, you might think it's just one trade and that it's not a significant amount, but don't fret, this amount can be multiplied up to 30 times with every single day having a buy and a sell. This would equal the following: 1000000 x 0,0001 x 0,6 x 2 x 30 = 3600 per month (this is the full amount the algorithm supplier makes per month) That's 3600 that you can earn with your algorithm! If your bot trades twice a day, it can go up to 7200 a month that you can earn with your algorithm by using our platform!","title":"How does it work?"},{"location":"makingmoney/","text":"How we can help you with monetisation # DemaTrading.ai was founded with the idea to be the perfect partner for anyone in, or interesting getting in, the beautiful world of algorithmic trading. We help traders to automate, optimise and monetise their trading strategies. No experience in trading? We can help you with your learning journey. Calculation example # An investor can put funds into your algorithm, trading with it, following this, you'll be able to earn money! Here's an example to show you how much you can earn: 1.000.000 in total funds (can be via multiple bots). A fee of 0.01% per trade, from which the algorithm supplier gets 60%. This will be multiplied by 2 (1 buy and 1 sale per day). With 30 trades per month on average this can easily average the following: 1.000.000 x 0.0001 x 0.6 x 2 x 30 = 3600 per month (this is the full amount the algorithm supplier makes per month). Under the condition that the bot trades twice per day, the algorithm supplier can make 7200 per month etc. Disclaimer: the fee in the algorithm needs to be 0.0025 (2.5%) For beginners # Configuration # In the config.json file you will find all necessary and important configuration options. ROI # The ROI table in the configuration is used to sell at a certain percentage of profit after a defined time. The keys in the dictionary are in minutes, the values are the percentages. Keys should always be an int with double quotes. Value could be an int or a float . \"roi\" : { \"0\" : 5 , \"60\" : 4 , \"120\" : 3.5 } This configuration means positions will always be closed if the profit is higher than 5%. After an hour (60 minutes) the position will automatically be closed if the profit is higher than 4%. Stop loss # The stoploss (SL) function is to prevent extreme loses. The SL value in the configuration file could be a float or an int . \"stoploss\" : \"-0.5\" , This configuration means positions will always be closed if the profit is lower than -0.5%. Getting started # Now you've seen how we configured all the basic settings and buy/sell signals. From now on, you can start working on your very own trading algorithms . More information regarding this can be found on the strategies page. For manual traders # If you have a strategy but you've done it manually, you're uncertain as to how to automate it yourself via strategies and automated trading, we can help you! We can automate it for you, depending on your strategy, and how effective it is and so forth! For algo traders # For algorithm traders, and you've developed a strategy that works, there are a few steps that you'd have to go through, but don't worry! They're not complicated what-so-ever. Sign contract: you sign a contract with us, which will be provided after a brief conversation with us (follows the local laws and the European laws; we're registered in Amsterdam). Test and validate: we test the algorithm you provide us and test it, see whether it is valid or not and whether it is a strategy all parties can profit off of. Optimize: we or you - in conjunction with us - optimize the algorithm, ensure it can work on our platform without fail nor error. Sandbox period: in the sandbox period, we dry-run the algorithm, ensuring that it will actually function and that it will be profitable for everyone involved. Going live: the final step. Your algorithm is now live! Time to earn some money! After these steps, you'll be paid on a monthly basis by us based on how much investors trade with your algorithm via the platform! Via the calculation example, you can see how much you'll be able to make on a monthly basis!","title":"Making Money"},{"location":"makingmoney/#how-we-can-help-you-with-monetisation","text":"DemaTrading.ai was founded with the idea to be the perfect partner for anyone in, or interesting getting in, the beautiful world of algorithmic trading. We help traders to automate, optimise and monetise their trading strategies. No experience in trading? We can help you with your learning journey.","title":"How we can help you with monetisation"},{"location":"makingmoney/#calculation-example","text":"An investor can put funds into your algorithm, trading with it, following this, you'll be able to earn money! Here's an example to show you how much you can earn: 1.000.000 in total funds (can be via multiple bots). A fee of 0.01% per trade, from which the algorithm supplier gets 60%. This will be multiplied by 2 (1 buy and 1 sale per day). With 30 trades per month on average this can easily average the following: 1.000.000 x 0.0001 x 0.6 x 2 x 30 = 3600 per month (this is the full amount the algorithm supplier makes per month). Under the condition that the bot trades twice per day, the algorithm supplier can make 7200 per month etc. Disclaimer: the fee in the algorithm needs to be 0.0025 (2.5%)","title":"Calculation example"},{"location":"makingmoney/#for-beginners","text":"","title":"For beginners"},{"location":"makingmoney/#configuration","text":"In the config.json file you will find all necessary and important configuration options.","title":"Configuration"},{"location":"makingmoney/#roi","text":"The ROI table in the configuration is used to sell at a certain percentage of profit after a defined time. The keys in the dictionary are in minutes, the values are the percentages. Keys should always be an int with double quotes. Value could be an int or a float . \"roi\" : { \"0\" : 5 , \"60\" : 4 , \"120\" : 3.5 } This configuration means positions will always be closed if the profit is higher than 5%. After an hour (60 minutes) the position will automatically be closed if the profit is higher than 4%.","title":"ROI"},{"location":"makingmoney/#stop-loss","text":"The stoploss (SL) function is to prevent extreme loses. The SL value in the configuration file could be a float or an int . \"stoploss\" : \"-0.5\" , This configuration means positions will always be closed if the profit is lower than -0.5%.","title":"Stop loss"},{"location":"makingmoney/#getting-started","text":"Now you've seen how we configured all the basic settings and buy/sell signals. From now on, you can start working on your very own trading algorithms . More information regarding this can be found on the strategies page.","title":"Getting started"},{"location":"makingmoney/#for-manual-traders","text":"If you have a strategy but you've done it manually, you're uncertain as to how to automate it yourself via strategies and automated trading, we can help you! We can automate it for you, depending on your strategy, and how effective it is and so forth!","title":"For manual traders"},{"location":"makingmoney/#for-algo-traders","text":"For algorithm traders, and you've developed a strategy that works, there are a few steps that you'd have to go through, but don't worry! They're not complicated what-so-ever. Sign contract: you sign a contract with us, which will be provided after a brief conversation with us (follows the local laws and the European laws; we're registered in Amsterdam). Test and validate: we test the algorithm you provide us and test it, see whether it is valid or not and whether it is a strategy all parties can profit off of. Optimize: we or you - in conjunction with us - optimize the algorithm, ensure it can work on our platform without fail nor error. Sandbox period: in the sandbox period, we dry-run the algorithm, ensuring that it will actually function and that it will be profitable for everyone involved. Going live: the final step. Your algorithm is now live! Time to earn some money! After these steps, you'll be paid on a monthly basis by us based on how much investors trade with your algorithm via the platform! Via the calculation example, you can see how much you'll be able to make on a monthly basis!","title":"For algo traders"},{"location":"quickstart/","text":"Running # Requirements for running with Docker (recommended) # Running the Engine just takes a few simple things: 1. Have Docker installed on your system ( click here to download Docker ) 2. A code editor such as Pycharm or VSCode . 3. Abillity to copy + paste and some motivation to figure things out. Requirements for running without Docker (alternative) # Running the Engine just takes a few simple things: 1. Have Python 3 installed ( click here to download Python ) 2. Have pip installed (Pip should be installed automatically on any version of Python that is 2.7 or above. If not installed on your system click here! ). 3. A code editor such as Pycharm or VSCode . 4. Install the TA-Lib dependencies ( follow the instructions given underneath the dependencies header ). 5. Have this repository cloned on your computer. Using make # As the docker commands listed above are not so developer friendly, we added a Makefile to help you save some tears. You'll need to have make installed on your system (check using make --version ), which is on most computers by default. If you don't, run brew install make (homebrew needed), sudo apt install make or choco install make (chocolately needed) for MacOS, Linux or Windows, respectively. To build the image: make build To run the container: make run To run on volume: make runv To build and run: make Running the Engine. # Running without Docker # First run: pip install -r requirements.txt After installing, you can run the backtesting module: python3 main.py Running with Docker (Docker is a must if using an Apple system with the Apple Silicon M1 chip or else it does not work). # First run: docker build . -t dema-engine:alpha To run the container: docker run --rm dema-engine:alpha Note: do not forget '--rm' as your Docker will keep the container if you do, which is not necessary and will cause extreme increase in memory usage. Apple Silicon M1 Chip # With the new M1 Chip by Apple Silicon, there are several compatibility issues with the packages required. While Docker works; TA-Lib, Pandas, and even Numpy are not compatible with the chip as of yet. The M1 Chip operates with ARM rather than x86, causing issues with regards to these Python packages. This is not something we are able to fix as it's on the behalf of the creators behind these packages and Apple itself, however, there are a few solutions that might help you or make it work on your Apple M1 machine. Open your Terminal application with Rosetta 2 and then run the script. You're ready to go! If it doesn't work with Rosetta, don't worry! There's another solution that can be offered. Just follow the following steps: Download Xcode12 Install Miniforge Create a Condo environment (don't forget to start up a new .zsh session after having installed Miniforge.) Use the following lines of code: conda create --name mytf conda activate mytf conda install -y python==3.8.6 conda install -y pandas TA-Lib You should be ready to go!","title":"Quickstart"},{"location":"quickstart/#running","text":"","title":"Running"},{"location":"quickstart/#requirements-for-running-with-docker-recommended","text":"Running the Engine just takes a few simple things: 1. Have Docker installed on your system ( click here to download Docker ) 2. A code editor such as Pycharm or VSCode . 3. Abillity to copy + paste and some motivation to figure things out.","title":"Requirements for running with Docker (recommended)"},{"location":"quickstart/#requirements-for-running-without-docker-alternative","text":"Running the Engine just takes a few simple things: 1. Have Python 3 installed ( click here to download Python ) 2. Have pip installed (Pip should be installed automatically on any version of Python that is 2.7 or above. If not installed on your system click here! ). 3. A code editor such as Pycharm or VSCode . 4. Install the TA-Lib dependencies ( follow the instructions given underneath the dependencies header ). 5. Have this repository cloned on your computer.","title":"Requirements for running without Docker (alternative)"},{"location":"quickstart/#using-make","text":"As the docker commands listed above are not so developer friendly, we added a Makefile to help you save some tears. You'll need to have make installed on your system (check using make --version ), which is on most computers by default. If you don't, run brew install make (homebrew needed), sudo apt install make or choco install make (chocolately needed) for MacOS, Linux or Windows, respectively. To build the image: make build To run the container: make run To run on volume: make runv To build and run: make","title":"Using make"},{"location":"quickstart/#running-the-engine","text":"","title":"Running the Engine."},{"location":"quickstart/#running-without-docker","text":"First run: pip install -r requirements.txt After installing, you can run the backtesting module: python3 main.py","title":"Running without Docker"},{"location":"quickstart/#running-with-docker-docker-is-a-must-if-using-an-apple-system-with-the-apple-silicon-m1-chip-or-else-it-does-not-work","text":"First run: docker build . -t dema-engine:alpha To run the container: docker run --rm dema-engine:alpha Note: do not forget '--rm' as your Docker will keep the container if you do, which is not necessary and will cause extreme increase in memory usage.","title":"Running with Docker (Docker is a must if using an Apple system with the Apple Silicon M1 chip or else it does not work)."},{"location":"quickstart/#apple-silicon-m1-chip","text":"With the new M1 Chip by Apple Silicon, there are several compatibility issues with the packages required. While Docker works; TA-Lib, Pandas, and even Numpy are not compatible with the chip as of yet. The M1 Chip operates with ARM rather than x86, causing issues with regards to these Python packages. This is not something we are able to fix as it's on the behalf of the creators behind these packages and Apple itself, however, there are a few solutions that might help you or make it work on your Apple M1 machine. Open your Terminal application with Rosetta 2 and then run the script. You're ready to go! If it doesn't work with Rosetta, don't worry! There's another solution that can be offered. Just follow the following steps: Download Xcode12 Install Miniforge Create a Condo environment (don't forget to start up a new .zsh session after having installed Miniforge.) Use the following lines of code: conda create --name mytf conda activate mytf conda install -y python==3.8.6 conda install -y pandas TA-Lib You should be ready to go!","title":"Apple Silicon M1 Chip"},{"location":"strategyexamples/","text":"Developing a strategy # On this page you will learn how to get started with developing your very own strategy. To give you a headstart, we included a sample strategy which can be found in /strategies/my_strategy.py . Sample strategy # How does our sample strategy work? We will guide you through the process. The sample can be found in /strategies/my_strategy.py . Generate indicators # To be able to base our buy / sell signal on indicators, we need to generate these strategies. For this strategy we decided we want to use RSI and EMA indicators to trigger buys/sells. We can make the calculated value available to the buy/sell methods by adding it to the dataframe. Like this for example: dataframe['rsi'] = ta.RSI(dataframe) Attention Setting this to another value than the maximum span of candles used will result in distorted results or errors. Buy signal # In our buy signal, we set some conditions for our signal. In our implementation, the pair wil only be bought when all of the following conditions are true. current_candle [ 'rsi' ] < 30 current_candle [ 'ema5' ] < current_candle [ 'ema21' ] current_candle [ 'volume' ] > 0 Sell signal # In our sell signal, we set some conditions for our signal. In our implementation, the pair wil only be sold when all of the following conditions are true. Beside the sell signal, positions can be closed using the Stop Loss or Return on Investment configurations in the config.json file. current_candle [ 'rsi' ] > 70 current_candle [ 'volume' ] > 0 Minimum candles # On the top of my_strategy.py , min_candles is defined. This is used as an offset for the amount of candles needed to calculate the biggest indicator. In our case, SMA(21) needs atleast 21 candles to work properly. Therefore, we set min_candles to 21. Configuration # In the config.json file you will find all necessary and important configuration options. ROI # The ROI table in the configuration is used to sell at a certain percentage of profit after a defined time. The keys in the dictionary are in minutes, the values are the percentages. Keys should always be an int with double quotes. Value could be an int or a float . \"roi\" : { \"0\" : 5 , \"60\" : 4 , \"120\" : 3.5 } This configuration means positions will always be closed if the profit is higher than 5%. After an hour (60 minutes) the position will automatically be closed if the profit is higher than 4%. Stop loss # The stoploss (SL) function is to prevent extreme loses. The SL value in the configuration file could be a float or an int . \"stoploss\" : \"-0.5\" , This configuration means positions will always be closed if the profit is lower than -0.5%. Getting started # Now you've seen how we configured all the basic settings and buy/sell signals. From now on, you can start working on your very own trading algorithms . This guide will use a very simple method of finding the right indicators and using them in your strategy. Note Creating your own strategy might take some time. Don't give up too fast! On the bottom of the page we listed some reading and learning material to become more familiar with trading, coding and everything else. Finding indicators # Go to TradingView Select a view of any coin pair you're interested it (make sure to select 'cryptos'). Have a look at the graph and decide at what moments you'd like to buy / sell. Add some indicators to the graph. See whether the indicators could indicate your buy/sell positions. If you found some sort of pattern, go to the next step. Configuring indicators # You can have a look at the generate_indicators() method in the my_strategy.py file how to configure indicators for your strategy. Using indicators in sell/buy signal # Have a look at the sell signal or buy signal part of the sample strategy. Other python logic and external packages could be applied to the buy/sell signal, as long as it's a condition. This means, we can also use the following: current_candle . loc [ ( (( current_candle [ 'rsi' ] < 30 ) | ( current_candle [ 'rsi' ] > 40 )) & ( current_candle [ 'ema5' ] < current_candle [ 'ema21' ]) & ( current_candle [ 'volume' ] > 0 ) ), 'buy' ] = 1 In this case, a position opens when RSI is either below 30 or above 40. Configuring Stoploss / Return On Investment # Stoploss and ROI are really important when creating an algorithm. These will make sure you get the best from your strategy, while not putting everything is at risk. Extra information # If you have trouble understanding our engine, the following resources could be useful for increasing your python, trading, whatever- skills. - TA-lib functions - all supported indicators by ta-lib","title":"Strategy Examples"},{"location":"strategyexamples/#developing-a-strategy","text":"On this page you will learn how to get started with developing your very own strategy. To give you a headstart, we included a sample strategy which can be found in /strategies/my_strategy.py .","title":"Developing a strategy"},{"location":"strategyexamples/#sample-strategy","text":"How does our sample strategy work? We will guide you through the process. The sample can be found in /strategies/my_strategy.py .","title":"Sample strategy"},{"location":"strategyexamples/#generate-indicators","text":"To be able to base our buy / sell signal on indicators, we need to generate these strategies. For this strategy we decided we want to use RSI and EMA indicators to trigger buys/sells. We can make the calculated value available to the buy/sell methods by adding it to the dataframe. Like this for example: dataframe['rsi'] = ta.RSI(dataframe) Attention Setting this to another value than the maximum span of candles used will result in distorted results or errors.","title":"Generate indicators"},{"location":"strategyexamples/#buy-signal","text":"In our buy signal, we set some conditions for our signal. In our implementation, the pair wil only be bought when all of the following conditions are true. current_candle [ 'rsi' ] < 30 current_candle [ 'ema5' ] < current_candle [ 'ema21' ] current_candle [ 'volume' ] > 0","title":"Buy signal"},{"location":"strategyexamples/#sell-signal","text":"In our sell signal, we set some conditions for our signal. In our implementation, the pair wil only be sold when all of the following conditions are true. Beside the sell signal, positions can be closed using the Stop Loss or Return on Investment configurations in the config.json file. current_candle [ 'rsi' ] > 70 current_candle [ 'volume' ] > 0","title":"Sell signal"},{"location":"strategyexamples/#minimum-candles","text":"On the top of my_strategy.py , min_candles is defined. This is used as an offset for the amount of candles needed to calculate the biggest indicator. In our case, SMA(21) needs atleast 21 candles to work properly. Therefore, we set min_candles to 21.","title":"Minimum candles"},{"location":"strategyexamples/#configuration","text":"In the config.json file you will find all necessary and important configuration options.","title":"Configuration"},{"location":"strategyexamples/#roi","text":"The ROI table in the configuration is used to sell at a certain percentage of profit after a defined time. The keys in the dictionary are in minutes, the values are the percentages. Keys should always be an int with double quotes. Value could be an int or a float . \"roi\" : { \"0\" : 5 , \"60\" : 4 , \"120\" : 3.5 } This configuration means positions will always be closed if the profit is higher than 5%. After an hour (60 minutes) the position will automatically be closed if the profit is higher than 4%.","title":"ROI"},{"location":"strategyexamples/#stop-loss","text":"The stoploss (SL) function is to prevent extreme loses. The SL value in the configuration file could be a float or an int . \"stoploss\" : \"-0.5\" , This configuration means positions will always be closed if the profit is lower than -0.5%.","title":"Stop loss"},{"location":"strategyexamples/#getting-started","text":"Now you've seen how we configured all the basic settings and buy/sell signals. From now on, you can start working on your very own trading algorithms . This guide will use a very simple method of finding the right indicators and using them in your strategy. Note Creating your own strategy might take some time. Don't give up too fast! On the bottom of the page we listed some reading and learning material to become more familiar with trading, coding and everything else.","title":"Getting started"},{"location":"strategyexamples/#finding-indicators","text":"Go to TradingView Select a view of any coin pair you're interested it (make sure to select 'cryptos'). Have a look at the graph and decide at what moments you'd like to buy / sell. Add some indicators to the graph. See whether the indicators could indicate your buy/sell positions. If you found some sort of pattern, go to the next step.","title":"Finding indicators"},{"location":"strategyexamples/#configuring-indicators","text":"You can have a look at the generate_indicators() method in the my_strategy.py file how to configure indicators for your strategy.","title":"Configuring indicators"},{"location":"strategyexamples/#using-indicators-in-sellbuy-signal","text":"Have a look at the sell signal or buy signal part of the sample strategy. Other python logic and external packages could be applied to the buy/sell signal, as long as it's a condition. This means, we can also use the following: current_candle . loc [ ( (( current_candle [ 'rsi' ] < 30 ) | ( current_candle [ 'rsi' ] > 40 )) & ( current_candle [ 'ema5' ] < current_candle [ 'ema21' ]) & ( current_candle [ 'volume' ] > 0 ) ), 'buy' ] = 1 In this case, a position opens when RSI is either below 30 or above 40.","title":"Using indicators in sell/buy signal"},{"location":"strategyexamples/#configuring-stoploss-return-on-investment","text":"Stoploss and ROI are really important when creating an algorithm. These will make sure you get the best from your strategy, while not putting everything is at risk.","title":"Configuring Stoploss / Return On Investment"},{"location":"strategyexamples/#extra-information","text":"If you have trouble understanding our engine, the following resources could be useful for increasing your python, trading, whatever- skills. - TA-lib functions - all supported indicators by ta-lib","title":"Extra information"}]}